# Purging Data 

Purging data from a database is an important task, which must be undertaken from time to time for a variety of reasons: confidentiality, security, contractual obligations, saving of space, etc.

Fabric provides a solution for implementing a purge process that is secure and can be implemented in an on-going manner. The purge process can also function as an archiving process, allowing Fabric or an external data base to function as the archival repository. Since Fabric works with Logical Units, complex purging rules can be created and implemented without impacting performance. 

The purge process is designed using the Fabric Studio user interface, which eliminates the need to perform coding tasks, as the purge can be done by implementation only.

This purge solution also allows simple testing and validations, as the process populates detailed reporting tables of the purged entities and the logic that led to purging or not purging a specific database entry.

Fabric uses a Logical Unit in order to search the application database for data that should be purged. This Logical Unit - specially designed for the purging process - enables the purging to be undertaken as one transaction, after the user has assessed the full picture of the purging needs.  

This Logical Unit-based purging process provides significant advantages, such as:

- Assuring that the purge will never affect the data integrity in your database, as for each such unit the deletion of data will only be done if it was successful across all the Logical Unit entities
- Allowing using complex logic in order to qualify data for purging. This logic is applied in each transaction only on the data of the specific LU, which means that only a small data volume is queried.
- Allowing breaking the purging process down into small chunks and running it on a regular basis. 

If archiving of the data should be performed as well – it can be performed immediately before the purge of a specific unit, and the purge will only be done if the archive was completed successfully for this unit. The archive repository can be either the Fabric itself or an alternative data repository.

Implementing a Purging project can be divided to the following macro steps: 

**Define the logical unit (LU)** that will be the base for the purge

 **Define the purging rules** that should be applied in order to decide what data qualifies for purging

**Implement the logical unit structure** and the purging logic as a Fabric project, using the functions and capabilities of its Purging Library.

Once those steps are completed, the process is ready for deployment and execution.

# Sync - Ignore Source Exception

### How Do I Set Fabric to Ignore a Source Exception when Running a Sync on an LU Instance?

The Sync process retrieves source data from source systems. By default, an error message is displayed when Fabric fails to connect to a data source or if a data source is unavailable.

For example:

* 	Get Customer 46:
    * 	Customer LU source system = Oracle DB.
    * 	[DB interface name](/articles/05_DB_interfaces/03_DB_interfaces_overview.md) = CRM_DB.
Run the following command on Fabric:  get Customer.46;
The following error is displayed:
“Failed to connect to interface CRM_DB: java.sql.SQLException: 
Listener refused the connection with the following error: 
ORA-12514, TNS: listener does not currently know of service requested in connect descriptor”

Click for more information about the Get Instance Fabric Command.

In specific cases, you may prefer to roll back the sync without getting an error (exception) when the source system cannot be accessed.
 
For example:

If the source DB is down for maintenance, you may prefer getting the latest version of the instance from Fabric instead of getting an error.

To do so, use the following Fabric command: set ignore_source_exception.

Syntax:

- set ignore_source_exception <true/false>;

Syntax-Examples:

-   set ignore_source_exception true;
-   set ignore_source_exception false;

When setting the ignore_source_exception to True, if Fabric fails to connect to the source system, Fabric does not throw an exception, but rolls back the changes of the LUI whereby the LUI version is not updated.\
Note that if the required LUI is not yet in Fabric, the ignore_source_exception is set to True and the following message is generated:\
“Not attached [LU Name]”.

Click for more information about LU Instance Storage and Versions.
 
